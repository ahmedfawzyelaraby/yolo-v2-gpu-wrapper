CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -v -pthread -ffast-math -funroll-loops -O3 -mavx -omp")
SET(CUDA_PROPAGATE_HOST_FLAGS OFF)
SET(CUDA_SEPARABLE_COMPILATION OFF)
LIST(APPEND CUDA_NVCC_FLAGS "-arch=sm_35;-std=c++11")

FIND_PACKAGE(CUDA REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)

ADD_DEFINITIONS(-DGPU)

CUDA_INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})

FILE(GLOB SOURCES "*.cu" "*.cpp" "*.c" "*.h")
CUDA_ADD_LIBRARY(lbmslv ${SOURCES})
TARGET_LINK_LIBRARIES(lbmslv ${OpenCV_LIBS} ${CUDA_LIBRARIES})

# CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# SET(CMAKE_CXX_COMPILER /usr/local/cuda/bin/nvcc)
# SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -arch=sm_35") #-v -pthread -ffast-math -funroll-loops -O3 -mavx -omp
# SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
# set( CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "" )
# set( CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "" )
# # SET(CUDA_PROPAGATE_HOST_FLAGS OFF)
# # SET(CUDA_SEPARABLE_COMPILATION OFF)
# # LIST(APPEND CUDA_NVCC_FLAGS "-arch=sm_35;-std=c++11")

# # FIND_PACKAGE(CUDA REQUIRED)
# FIND_PACKAGE(OpenCV REQUIRED)

# ADD_DEFINITIONS(-DGPU)

# # CUDA_INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
# INCLUDE_DIRECTORIES(/usr/local/cuda/include) #${CUDA_INCLUDE_DIRS})

# FILE(GLOB SOURCES "*.cu" "*.cpp" "*.c" "*.h")
# ADD_EXECUTABLE(lbmslv ${SOURCES})
# add_dependencies(${PROJECT_NAME} CUDATestLib)
# TARGET_LINK_LIBRARIES(lbmslv ${OpenCV_LIBS} /usr/local/cuda/lib64) #${CUDA_LIBRARIES})